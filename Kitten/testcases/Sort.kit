class Sort
{
    
    field int[] array
    field int size
    
    constructor(int[] array, int size)
    {
        this.array := array;
        this.size := size
    }
    
    method void bubbleSort()
    {
        int i := 0;
        int flag := 1;
        int temp := 0;
        
        while (flag = 1)
        {
            flag := 0;
            
            for (i := 0; i < this.size - 1; i := i + 1)
                if (this.array[i] > this.array[i + 1]) then
                {
                    temp := this.array[i];
                    this.array[i] := this.array[i + 1];
                    this.array[i + 1] := temp;
                    flag := 1
                }
        }
    }
    
    method void mergeSort()
        this.realMergeSort(0, this.size - 1)
            
    method void realMergeSort(int l, int r)
    {
        int q := 0;
        
        if (l = r) then
            return;
            
        q := (l + r) / 2;

        this.realMergeSort(l, q);
        this.realMergeSort(q + 1, r);
        this.merge(l, q, r)
    }
    
    method void merge(int l, int q, int r)
    {
        int[] temp := new int[r - l + 1];
        int i := l;
        int j := q + 1;
        int h := 0;
        
        while (i <= q & j <= r)
        {
            if (this.array[i] <= this.array[j]) then
            {
                temp[h] := this.array[i];
                i := i + 1
            }
            else
            {
                temp[h] := this.array[j];
                j := j + 1
            };
            
            h := h + 1
        };
        
        if (i <= q) then
        {
            for (i := i; i <= q; i := i + 1)
            {
                temp[h] := this.array[i];
                h := h + 1
            }
        }
        else 
        {
            for (j := j; j <= r; j := j + 1)
            {
                temp[h] := this.array[j];
                h := h + 1
            }
        };
        
        for (i := 0; i < (r - l + 1) ; i := i + 1)
            this.array[i + l] := temp[i]
    }
    
    method void quickSort()
        this.realQuickSort(0, this.size - 1)
        
    method void realQuickSort(int l, int r)
    {
        int q := 0;
        
        if (l >= r) then
            return;
            
        q := this.partition(l, r);
        
        this.realQuickSort(l, q);
        this.realQuickSort(q + 1, r)
    }
    
    method int partition(int l, int r)
    {
        int x := this.array[l];
        int i := l;
        int j := r;
        int temp := 0;
        
        while (l = l)
        {
            while (this.array[j] > x) j := j - 1;
            while (this.array[i] < x) i := i + 1;
              
            if (i < j) then
            {
                temp := this.array[i];
                this.array[i] := this.array[j];
                this.array[j] := temp
            }
            else
                return j
        };
        
        return -1
    }
                
    method String toString()
    {
        String res := "";
        int i := 0;
        
        for (i := 0; i < this.size; i := i + 1)
            res := res.concat("[").concat(this.array[i]).concat("]");
            
        return res.concat("\n")
    }
        
    method void main()
    {
        int SIZE := 1;
        int[] array := new int[SIZE];
        int i := 0;
        
        for (i := 0; i < SIZE; i := i + 1)
            array[i] := SIZE - 1 - i;
        
        Sort s1 := new Sort(array, SIZE);
        "Before bubbleSorting...\n".output();
        s1.toString().output();
        s1.bubbleSort();
        "After bubbleSorting...\n".output();
        s1.toString().output();
        
        for (i := 0; i < SIZE; i := i + 1)
            array[i] := SIZE - 1 - i;
        
        Sort s2 := new Sort(array, SIZE);
        "Before mergeSorting...\n".output();
        s2.toString().output();
        s2.mergeSort();
        "After mergeSorting...\n".output();
        s2.toString().output();
        
        for (i := 0; i < SIZE; i := i + 1)
            array[i] := SIZE - 1 - i;
        
        Sort s3 := new Sort(array, SIZE);
        "Before quickSorting...\n".output();
        s3.toString().output();
        s3.quickSort();
        "After quickSorting...\n".output();
        s3.toString().output()
    }

}